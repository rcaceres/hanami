create TCP/IP socket
bind socket to port
listen for incoming connections

inputs = [ list of sockets from which we expect to read ]
outputs = [ ] // socks to write

message_queues = {} // hashtable of outgoing message queues

def if_accept:
   accept clientsock, clientaddr
   append clientsock to inputs
   message_queues[clientsock] = Queue.Queue()

def if_recv():
   message_queues[readsock].put(data)
   if readsock not in outputs
      append readsock to outputs

def if_close()
   if readsock in outputs
      remove readsock from outputs
   remove readsock from inputs
   close readsock
   delete message_queues[readsock]

while there is stuff from which we expect to read:
      readable, writeable, exceptional lists from select-selecting out of inputs,outputs

      for a readable socket:
      	  
	  if socket belongs to server:
	     if_accept()
	  
	  else:
	     data = recv(buffer)
	     if data: if_recv()	     
	     else: if_close()
      
      for a writable socket:
      	  try:
		get next_data from writeable socket's queue
		send next_data

	  except if queue is empty:
	  	remove writesock from outputs
