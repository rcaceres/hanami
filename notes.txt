class Proxy:

      def __init__(self):
      	  create TCP/IP socket
	  bind socket to port
	  listen for incoming connections

	  self.inputs = [ list of sockets from which we expect to read ]
	  self.outputs = [ ] // socks to write
	  self.message_queues = {} // hashtable of outgoing message queues
	  
      def if_accept:
         accept clientsock, clientaddr
         append clientsock to inputs
   	 message_queues[clientsock] = Queue.Queue()

      def if_recv():
      	 message_queues[readsock].put(data)
   	 if readsock not in outputs
      	    append readsock to outputs

      def if_close():
      	 if readsock in outputs
      	    remove readsock from outputs
   	 remove readsock from inputs
   	 close readsock
   	 delete message_queues[readsock]

      def main_loop():
         while inputs:
      	      readable, writable, exceptional lists from select-selecting out of inputs,outputs

	      for readsock in readable:
	         if socket belongs to server:
	     	    if_accept()	  
		else:
		    data = recv(buffer)
	     	    if data: 
		       if_recv()	     
		    else:
		       if_close()
      
	      for writesock in writable:
      	         try:
		    get next_data from writeable socket's queue
		    send next_data
		 except if queue is empty:
	  	    remove writesock from outputs
